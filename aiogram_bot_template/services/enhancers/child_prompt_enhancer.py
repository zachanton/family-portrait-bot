# aiogram_bot_template/services/enhancers/child_prompt_enhancer.py
import json
import structlog
from typing import List, Optional

from pydantic import BaseModel, Field

from aiogram_bot_template.data.settings import settings
from aiogram_bot_template.services.clients import factory as client_factory
from aiogram_bot_template.data.constants import ChildAge, ChildGender, ChildResemblance
from aiogram_bot_template.services.pipelines import PROMPT_CHILD_DEFAULT

logger = structlog.get_logger(__name__)

# --- Pydantic Models for Structured LLM Output ---

class HairstyleOption(BaseModel):
    """A single, unique hairstyle description."""
    style_description: str = Field(..., description="A concise, creative, age-appropriate hairstyle description focusing only on style, texture, and cut. DO NOT mention hair color.")

class ChildFeatureDetails(BaseModel):
    """Structured model for creative features of the child, generated by an LLM."""
    eye_description: str = Field(..., description="A detailed, one-sentence description of the child's eyes, explicitly mentioning inheritance from the 'other parent' and inferring an open, relaxed state.")
    hairstyle_options: List[HairstyleOption] = Field(..., description="A list of unique hairstyle descriptions for the child.")


# --- System Prompt for the LLM ---

_CHILD_FEATURE_SYSTEM_PROMPT = """
You are an expert AI character artist specializing in creating plausible children's portraits from parental features. Your task is to analyze a photo of one parent and generate a set of detailed, creative features for their child, formatted as a JSON object.

**INPUTS YOU WILL RECEIVE:**
- A photo of the 'non-resemblance' parent (to source eye color from).
- Parameters: child's age, gender, and the number of hairstyle variations needed.

**GOAL:**
Your output must be a single, valid JSON object that strictly adheres to the schema provided. This JSON will be used to programmatically construct prompts for an image generation model.

**CRITICAL RULES FOR `eye_description`:**
1.  **ANTI-SQUINT:** If the parent in the photo is squinting, smiling, or has closed/obscured eyes, you MUST ignore this and describe their eyes in a **neutral, relaxed, fully open state.**
2.  **EXPLICIT INHERITANCE:** Your description MUST explicitly state that the child inherits these eye features from the "other parent" (the one in the photo). This is crucial for the final model.
3.  **DETAIL:** Describe the eye's shape (e.g., 'almond-shaped', 'round', 'deep-set') and precise color/pattern (e.g., 'deep chocolate brown', 'bright sapphire blue with a dark limbal ring').
4.  **FORMAT:** Must be a single, descriptive sentence.

**CRITICAL RULES FOR `hairstyle_options`:**
1.  **NO HAIR COLOR:** Do **NOT** mention hair color. The final model determines this from parental photos. Focus exclusively on **style, texture, and cut**.
2.  **VARIETY:** Each `style_description` in the list must be unique and offer a different visual idea.
3.  **APPROPRIATENESS:** All styles must be appropriate for the specified age and gender.
4.  **FORMAT:** Each description should be a concise phrase or short sentence.

**OUTPUT FORMAT:**
- Respond with **JSON ONLY**.
- The JSON must strictly adhere to the schema provided in the user prompt. No extra text, explanations, or markdown.
"""

def _get_age_str(age_value: str) -> str:
    """Converts age enum value to a human-readable string for the prompt."""
    try:
        age_enum = ChildAge(age_value)
        if age_enum == ChildAge.INFANT:
            return "infant or toddler (1-3 years)"
        if age_enum == ChildAge.CHILD:
            return "young child (5-7 years)"
        if age_enum == ChildAge.PRETEEN:
            return "preteen (9-11 years)"
    except ValueError:
        return "child"
    return "child"


async def get_enhanced_child_prompts(
    non_resemblance_parent_url: str,
    num_prompts: int,
    child_age: str,
    child_gender: str,
    child_resemblance: str,
) -> Optional[List[str]]:
    """
    Generates a list of fully-formed, ready-to-use prompts for child generation.

    This function performs a single call to a language model to get structured data
    (eye and hairstyle descriptions), then injects this data into a base prompt template
    to create N complete prompts.

    Args:
        non_resemblance_parent_url: URL to the photo of the parent the child resembles less.
        num_prompts: The number of unique prompts to generate.
        child_age: The age category of the child.
        child_gender: The gender of the child.
        child_resemblance: The parent the child should primarily resemble.

    Returns:
        A list of complete prompt strings, or None on failure.
    """
    config = settings.text_enhancer
    if not config.enabled:
        logger.warning("Child prompt enhancer is disabled in settings.")
        # Fallback to a simple prompt
        base_prompt = PROMPT_CHILD_DEFAULT.replace("{{INHERITED_EYE_FEATURES}}", "clear, bright eyes.")
        base_prompt = base_prompt.replace("{{HAIRSTYLE_DESCRIPTION}}", "a simple, neat hairstyle.")
        return [base_prompt] * num_prompts

    log = logger.bind(
        model=config.model,
        image_url=non_resemblance_parent_url,
        num_prompts=num_prompts
    )

    try:
        # 1. Get structured creative details from the LLM
        client = client_factory.get_ai_client(config.client)
        log.info("Requesting structured child features from vision model.")

        schema_definition = ChildFeatureDetails.model_json_schema()
        age_str = _get_age_str(child_age)
        gender_str = "girl" if child_gender == ChildGender.GIRL.value else "boy"

        user_prompt_text = (
            f"Please generate creative features for a {age_str} {gender_str}. "
            f"Generate exactly {num_prompts} unique hairstyle options. "
            "Analyze the parent in the provided photo for the eye description. "
            "Return your analysis as a JSON object that strictly follows this schema:"
            f"\n\n```json\n{json.dumps(schema_definition, indent=2)}\n```"
        )

        response = await client.chat.completions.create(
            model=config.model,
            response_format={"type": "json_object"},
            messages=[
                {"role": "system", "content": _CHILD_FEATURE_SYSTEM_PROMPT},
                {"role": "user", "content": [
                    {"type": "text", "text": user_prompt_text},
                    {"type": "image_url", "image_url": {"url": non_resemblance_parent_url}, "detail": "high"},
                ]},
            ],
            max_tokens=2048,
            temperature=0.8,
        )

        content = response.choices[0].message.content if response.choices else None
        if not content:
            log.warning("Child feature enhancer returned an empty response.")
            return None

        feature_details = ChildFeatureDetails.model_validate_json(content)
        log.info("Successfully received structured child features.", details=feature_details.model_dump())

        # 2. Assemble the final prompts
        completed_prompts = []
        child_role = "daughter" if child_gender.lower() == "girl" else "son"
        resemblance_parent = child_resemblance
        non_resemblance_parent = (
            ChildResemblance.DAD.value if resemblance_parent == ChildResemblance.MOM.value else ChildResemblance.MOM.value
        )

        for i in range(num_prompts):
            hairstyle_desc = feature_details.hairstyle_options[i % len(feature_details.hairstyle_options)].style_description

            final_prompt = PROMPT_CHILD_DEFAULT
            final_prompt = final_prompt.replace("{{CHILD_AGE}}", child_age)
            final_prompt = final_prompt.replace("{{CHILD_GENDER}}", child_gender)
            final_prompt = final_prompt.replace("{{CHILD_ROLE}}", child_role)
            final_prompt = final_prompt.replace("{{INHERITED_EYE_FEATURES}}", feature_details.eye_description)
            final_prompt = final_prompt.replace("{{HAIRSTYLE_DESCRIPTION}}", hairstyle_desc)
            final_prompt = final_prompt.replace("{{PARENT_A}}", resemblance_parent)
            final_prompt = final_prompt.replace("{{PARENT_B}}", non_resemblance_parent)
            # A common phrase in the prompt that needs replacing too
            final_prompt = final_prompt.replace("other parent", non_resemblance_parent)

            completed_prompts.append(final_prompt)
        
        return completed_prompts

    except Exception:
        log.exception("An error occurred during child prompt enhancement.")
        return None